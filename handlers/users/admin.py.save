import asyncio
import os
import sqlite3
import datetime
import aiogram
import asyncpg
from aiogram import types
from aiogram.dispatcher import FSMContext
from data.config import ADMINS
from keyboards.default.menu import cancel, admin_key
from keyboards.inline.menu_in import yesno
from loader import dp, db, bot
from states.state import Reklama, Forward, Upload
from xlsxwriter.workbook import Workbook

import logging


@dp.message_handler(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", user_id=ADMINS)
async def get_all_users(message: types.Message):
    users = await db.count_users()
    await message.answer(f'–í –±–∞–∑–µ {users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!')


@dp.message_handler(text="üì® –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è", user_id=ADMINS)
async def send_ad_to_all(message: types.Message):
    await message.answer("–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–Ω–∞–ª–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏!\n"
                         "–í–∞–∂–Ω–æ —á—Ç–æ–±—ã –±–æ—Ç –±—ã–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞!", reply_markup=cancel)
    await Forward.one.set()


@dp.message_handler(content_types=types.ContentType.ANY, state=Forward.one)
async def answer_fullname(message: types.Message, state: FSMContext):
    if message.text != "–û—Ç–º–µ–Ω–∏—Ç—å":
        try:
            cnt = 0
            users = await db.select_all_users()
            for user in users:
                try:
                    try:
                        try:
                            await bot.forward_message(chat_id=user['id'],
                                                      from_chat_id=message.forward_from_chat.id,
                                                      message_id=message.forward_from_message_id)
                            cnt += 1
                            await asyncio.sleep(0.07)
                        except aiogram.utils.exceptions.ChatNotFound:
                            pass
                    except aiogram.utils.exceptions.MessageToForwardNotFound:
                        await message.answer('1.–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞\n'
                                             '2.–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!', reply_markup=admin_key)
                        await state.finish()
                        break
                except aiogram.utils.exceptions.BotBlocked:
                    pass
            await message.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n"
                                 f"–û—Ç–ø—Ä–∞–≤–∏–ª {cnt} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", reply_markup=admin_key)
            await state.finish()
        except AttributeError:
            await message.answer('–ü–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!')

    else:
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ!", reply_markup=admin_key)
        await state.finish()


@dp.message_handler(text='‚úâ –†–µ–∫–ª–∞–º–∞', user_id=ADMINS)
async def send_ad_to_all(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã\n"
                         "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–û—Ç–º–µ–Ω–∏—Ç—å</b>", reply_markup=cancel)
    await Reklama.reklama.set()


@dp.message_handler(state=Reklama.reklama)
async def send_ad_to_all(message: types.Message, state: FSMContext):
    reklama_text = message.text
    if reklama_text != '–û—Ç–º–µ–Ω–∏—Ç—å':
        users = await db.select_all_users()
        cnt = 0
        for user in users:

            user_id = user[0]
            try:
                try:
                    cnt += 1
                    await bot.send_message(chat_id=user_id, text=reklama_text)
                    await asyncio.sleep(0.05)
                except aiogram.utils.exceptions.ChatNotFound:
                    pass
            except aiogram.utils.exceptions.BotBlocked:
                pass
        await message.answer('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–ª–∞–º—ã –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å!\n'
                             f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {cnt}  –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', reply_markup=admin_key)
        await state.finish()
    else:

        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ!", reply_markup=admin_key)
        await state.finish()


@dp.message_handler(text=['üéâ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è!', '/bday'], user_id=ADMINS)
async def birth_day(message: types.Message):
    while True:
        time1 = datetime.timedelta(hours=int(datetime.datetime.now().strftime('%H')), minutes=int(datetime.datetime.now().strftime('%M')), seconds=int(datetime.datetime.now().strftime('%S')))
        time2 = datetime.timedelta(hours=int(23), minutes=int(59), seconds=int(59))
        ost = time2 - time1
        user_all_brithday = ''
        user_all_brithday = '–°–µ–≥–æ–¥–Ω—è –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ —É:\n\n'
        users = await db.select_all_users()
        now = datetime.datetime.now().strftime('%d-%m')
        cnt = 0
        for user in users:
            try:
                cnt += 1
                if user["birth_day"].strftime('%d-%m') == now:
                    user_all_brithday += f'–ò–º—è: <a href="tg://user?id={user["id"]}">{user["fullname"]}</a> | @{user["username"]}\n' \
                                         f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +{user["phone"]}\n\n'
                    lang_db = await db.show_lang(id=user['id'])
                    try:
                        try:
                            try:
                                if lang_db['lang'] == 'uz':
					
					await message.bot.send_message(chat_id=user['id'],text="Tug'ilgan kuningiz bilan tabriklaymiz! Sizga muvaffaqiyat, omad, oilaviy farovonlik tilaymiz. Sizni uzoq vaqt yangi krossovkalar bilan xursand qilishda va zavq olib kelishda davom etamiz!\n"
                               						"<tg-spoiler>Siz uchun butun assortimentga 10% chegirma e'lon qilamiz, chegirma ikki kun davomida amal qiladi. Buyurtma berish uchun @hypeshop_adm ga yozing<tg-spoiler>")
                                else:
					await message.bot.send_message(chat_id=user['id'],text='–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –í–∞—Å —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ñ–µ–ª–∞–µ–º —É—Å–ø–µ—Ö–æ–≤, —É–¥–∞—á–∏, —Å–µ–º–µ–π–Ω–æ–≥–æ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è, –∏ –Ω–∞–¥–µ–∂–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –ø–æ –∂–∏–∑–Ω–∏. –ü—É—Å—Ç—å –º—ã –µ—â–µ –¥–æ–ª–≥–æ –±—É–¥–µ–º –í–∞—Å —Ä–∞–¥–æ–≤–∞—Ç—å –Ω–æ–≤—ã–º–∏ –∫—Ä–æ—Å—Å–æ–≤–∫–∞–º–∏ –∏ –ø—Ä–∏–Ω–æ—Å–∏—Ç—å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ!\n'
                                                       '<tg-spoiler>–í —á–µ—Å—Ç—å —ç—Ç–æ–≥–æ –¥–ª—è –í–∞—Å —Å–∫–∏–¥–∫–∞ 10% –Ω–∞ –≤–µ—Å—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç, —Å–∫–∏–¥–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–≤–∞ –¥–Ω—è. –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–∏—à–∏—Ç–µ @hypeshop_adm</tg-
                                await asyncio.sleep(0.05)
                            except TypeError:
                                pass
                        except aiogram.utils.exceptions.ChatNotFound:
                            pass
                    except aiogram.utils.exceptions.BotBlocked:
                        pass
                else:
                    pass
            except AttributeError:
                pass
        try:
            for admin in ADMINS:
                try:
                    await bot.send_message(chat_id=admin, text=user_all_brithday)
                except Exception as err:
                    logging.exception(err)
        except aiogram.utils.exceptions.MessageTextIsEmpty:
            await message.answer('–°–µ–≥–æ–¥–Ω—è –±–µ–∑ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤')
        await asyncio.sleep(ost.seconds + 2)


@dp.message_handler(text='üîÇ –†–µ—Å—Ç–∞—Ä—Ç', user_id=ADMINS)
async def restart(message: types.Message):
    await message.answer('–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?', reply_markup=yesno)


@dp.callback_query_handler(text='yes')
async def yes(call: types.CallbackQuery):
    await call.message.delete()
    user = await db.select_all_users()
    for i in user:
        await db.user_restart(tg_id=i['id'], count=0)
    await call.message.answer('–í—Å–µ —Å–±—Ä–æ—à–µ–Ω–æ!', reply_markup=admin_key)


@dp.callback_query_handler(text='no')
async def no(call: types.CallbackQuery):
    await call.message.delete()
    await call.message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ!', reply_markup=admin_key)


@dp.message_handler(text='üìá Excel')
async def excel(message: types.Message):
    user = await db.select_all_users()
    workbook = Workbook(
        f'backend/conf/{datetime.datetime.now().strftime("%Y_%m_%d")}.xlsx')  # –§–∞–π–ª –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∞–¥–º–∏–Ω—É
    worksheet = workbook.add_worksheet(name="Users")
    bold = workbook.add_format({'bold': True})
    worksheet.write('A1', 'ID', bold)
    worksheet.write('B1', 'USERNAME', bold)
    worksheet.write('C1', 'TG_NAME', bold)
    worksheet.write('D1', 'COMPETITION_ID', bold)
    worksheet.write('E1', 'NAME', bold)
    worksheet.write('F1', 'PHONE', bold)
    worksheet.write('G1', 'DATE', bold)
    worksheet.write('H1', 'REF_COUNT', bold)
    worksheet.write('I1', 'PARENT_ID', bold)
    worksheet.write('J1', 'LANG', bold)
    worksheet.write('K1', 'BAN', bold)
    for i, row in enumerate(user):
        for j, value in enumerate(row):
            worksheet.write(i + 1, j, str(value))
    workbook.close()
    await message.answer_document(
        document=open(f'backend/conf/{datetime.datetime.now().strftime("%Y_%m_%d")}.xlsx', 'rb'))


@dp.message_handler(text='‚¨áÔ∏è–ó–∞–≥—Ä—É–∑–∏—Ç—å')
async def upload(message: types.Message):
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .db/.sqlite3', reply_markup=cancel)
    await Upload.one.set()


@dp.message_handler(text='–û—Ç–º–µ–Ω–∏—Ç—å', state=Upload.one)
async def text(message: types.Message, state: FSMContext):
    await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ!', reply_markup=admin_key)
    await state.finish()


@dp.message_handler(content_types=['document'], state=Upload.one)
async def file_upl(message: types.Message, state: FSMContext):
    file_id = message.document.file_id
    file = await bot.get_file(file_id)
    await bot.download_file(file.file_path, 'data/upload.db')
    conn = sqlite3.connect("data/upload.db")
    cursor = conn.execute("SELECT * FROM Users").fetchall()
    for i in cursor:
        try:
            try:
                try:
                    alld = i[5].split('.')
                    date = datetime.date(day=int(alld[0]), month=int(alld[1]), year=int(alld[2]))
                    lang = ''
                    if i[8] == 'rus':
                        lang = 'ru'
                    elif i[8] == 'uzb':
                        lang = 'uz'
                    await db.add_new(telegram_id=i[0],
                                     full_name=i[1],
                                     username=None,
                                     ref_count=i[6],
                                     parent=i[7],
                                     birth_day=date,
                                     lang=lang,
                                     phone=i[4],
                                     name2=i[3],
                                     ban=True,
                                     conkurs=int(i[2]))
                except AttributeError:
                    pass
            except ValueError:
                pass
        except asyncpg.exceptions.UniqueViolationError:
            pass
    await message.answer('–í—Å–µ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª –≤ –±–∞–∑—É!', reply_markup=admin_key)
    conn.close()
    os.remove(f'data/upload.db')
    await state.finish()


@dp.message_handler(text='SQLite')
async def sqlite(message: types.Message):

    user = await db.select_all_users()
    conn = sqlite3.connect(
        f"data/SQLite.db")
    cursor = conn.cursor()
    cursor.execute(
        'CREATE TABLE "main_user" ("id" bigint NOT NULL UNIQUE, "username" varchar(150) NULL, "name" varchar(150) NULL, "competition_id" bigint NOT NULL PRIMARY KEY, "fullname" varchar(250) NULL, "phone" varchar(250) NULL, "birth_day" date NULL, "ref_count" bigint NULL, "parent" bigint NULL, "lang" varchar(250) NULL, "ban" boolean NOT NULL);')
    conn.commit()
    for i in user:
        cursor.execute(
            '''INSERT INTO main_user("id", "username", "name" , "competition_id" , "fullname", "phone" , "birth_day", "ref_count", "parent", "lang" ,"ban") VALUES (?,?,?,?,?,?,?,?,?,?,?)''',
            (i['id'], i['username'], i['name'], i['competition_id'], i['fullname'], i['phone'], i['birth_day'],
             i['ref_count'], i['parent'], i['lang'], i['ban'])
        )
        conn.commit()
    await message.answer_document(document=open(f'data/SQLite.db', 'rb'), reply_markup=admin_key)
    conn.close()
    os.remove('data/SQLite.db')
